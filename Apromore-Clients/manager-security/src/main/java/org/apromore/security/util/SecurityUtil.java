/*-
 * #%L
 * This file is part of "Apromore Core".
 * 
 * Copyright (C) 2011 - 2017 Queensland University of Technology.
 * %%
 * Copyright (C) 2018 - 2021 Apromore Pty Ltd.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */

package org.apromore.security.util;

import java.math.BigInteger;
import java.nio.charset.Charset;
import static java.nio.charset.StandardCharsets.UTF_8;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import org.apromore.dao.model.Membership;

/**
 * Created with IntelliJ IDEA.
 * User: cameron
 * Date: 20/11/2013
 * Time: 4:01 PM
 * To change this template use File | Settings | File Templates.
 */
public final class SecurityUtil {

    private SecurityUtil() {
        // No instances allowed.
    }

    /**
     * @param membership  a user account's authentication details
     * @param password  a candidate password
     * @return whether the <var>password</var> matches the <var>membership</var>
     * @throws NoSuchAlgorithmException if the local Java installation doesn't support the
     *     password hashing algorithm indicated by <var>membership</var>
     * @see Membership#getHashingAlgorithm
     * @see <a href="https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#messagedigest-algorithms">Message
     *     digest algorithms</a>
     */
    public static boolean authenticate(final Membership membership, final String password)
        throws NoSuchAlgorithmException {

        return Membership.MD5_UNSALTED.equals(membership.getHashingAlgorithm())
            ? membership.getPassword().equals(hash(password, "MD5", Charset.defaultCharset()))
            : membership.getPassword().equals(hash(password + membership.getSalt(), membership.getHashingAlgorithm()));
    }

    /**
     * @param cleartext  a cleartext to be converted into UTF-8 bytes and hashed
     * @param algorithm  the name of a message hashing algorithm, e.g. <code>"MD5"</code>
     * @return a hash generated by the <var>algorithm</var>, converting the bytes from the
     *     <var>cleartext</var> and representing the result as a hexadecimal string without
     *     leading zeroes; never <code>null</code>
     * @throws NoSuchAlgorithmException if the specified <var>algorithm</var> isn't supported
     */
    public static String hash(String cleartext, String algorithm)
        throws NoSuchAlgorithmException {

        return hash(cleartext, algorithm, UTF_8);
    }

    /**
     * @param cleartext  a cleartext to be hashed
     * @param algorithm  the name of a message hashing algorithm, e.g. <code>"MD5"</code>
     * @param charset  how <var>cleartext</var> characters are to be converted into bytes
     * @return a hash generated by the <var>algorithm</var>, converting the bytes from the
     *     <var>cleartext</var> and representing the result as a hexadecimal string without
     *     leading zeroes; never <code>null</code>
     * @throws NoSuchAlgorithmException if the specified <var>algorithm</var> isn't supported
     */
    public static String hash(String cleartext, String algorithm, Charset charset)
        throws NoSuchAlgorithmException {

        MessageDigest digest = MessageDigest.getInstance(algorithm);
        digest.update(cleartext.getBytes(charset));
        BigInteger hashed = new BigInteger(1, digest.digest());

        return hashed.toString(16);
    }
}
